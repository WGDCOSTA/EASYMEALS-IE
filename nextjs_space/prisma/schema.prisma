
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/easymeals_ie/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  phone         String?
  address       String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  subscriptions Subscription[]
  contacts      Contact[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id              String          @id @default(cuid())
  name            String
  description     String
  price           Float
  imageUrl        String
  category        ProductCategory
  isActive        Boolean         @default(true)
  stockQuantity   Int             @default(0)
  storageType     StorageType
  allergens       String[]        @default([])
  calories        Int?
  protein         Float?
  carbs           Float?
  fat             Float?
  preparationTime Int?            // minutes
  servingSize     Int?            // servings
  ingredients     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  orderItems      OrderItem[]
  subscriptionItems SubscriptionItem[]
  
  @@map("products")
}

model DeliveryZone {
  id          String  @id @default(cuid())
  name        String
  areas       String[] @default([])
  deliveryFee Float
  isActive    Boolean @default(true)
  
  orders      Order[]
  
  @@map("delivery_zones")
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  subtotal       Float
  deliveryFee    Float
  total          Float
  paymentIntentId String?
  deliveryAddress String
  deliveryZoneId String
  scheduledFor   DateTime?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  user           User         @relation(fields: [userId], references: [id])
  deliveryZone   DeliveryZone @relation(fields: [deliveryZoneId], references: [id])
  orderItems     OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Subscription {
  id                String               @id @default(cuid())
  userId            String
  frequency         SubscriptionFrequency
  status            SubscriptionStatus   @default(ACTIVE)
  nextDeliveryDate  DateTime
  deliveryAddress   String
  deliveryZoneId    String?
  stripeSubscriptionId String?
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  user              User                 @relation(fields: [userId], references: [id])
  subscriptionItems SubscriptionItem[]
  
  @@map("subscriptions")
}

model SubscriptionItem {
  id             String @id @default(cuid())
  subscriptionId String
  productId      String
  quantity       Int
  
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id])
  
  @@map("subscription_items")
}

model Contact {
  id          String      @id @default(cuid())
  userId      String?
  name        String
  email       String
  subject     String
  message     String
  status      ContactStatus @default(OPEN)
  createdAt   DateTime    @default(now())
  
  user        User?       @relation(fields: [userId], references: [id])
  
  @@map("contacts")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProductCategory {
  TRADITIONAL_IRISH
  INTERNATIONAL
  HEALTHY
  VEGETARIAN
  SEAFOOD
  COMFORT_FOOD
}

enum StorageType {
  FRESH_CHILLED
  FROZEN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum SubscriptionFrequency {
  WEEKLY
  FORTNIGHTLY
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum ContactStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

model PageContent {
  id          String   @id @default(cuid())
  page        String   @unique // e.g., "homepage", "combos-meals", "kids-meals"
  content     Json     // Stores editable content as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("page_contents")
}
