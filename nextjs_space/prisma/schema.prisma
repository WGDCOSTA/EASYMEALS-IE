
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/easymeals_ie/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  phone         String?
  address       String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  subscriptions Subscription[]
  contacts      Contact[]
  nutritionProfile NutritionProfile?
  mealPlans     MealPlan[]
  dailyIntakes  DailyIntake[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id              String          @id @default(cuid())
  name            String
  description     String
  price           Float
  originalPrice   Float?          // For showing discounts
  imageUrl        String
  category        ProductCategory
  isActive        Boolean         @default(true)
  stockQuantity   Int             @default(0)
  storageType     StorageType
  allergens       String[]        @default([])
  
  // Enhanced Nutritional Information (EU Standards)
  calories        Int?            // kcal (same as energyKcal)
  energyKj        Int?            // Energy in kilojoules (kJ)
  protein         Float?          // grams
  carbs           Float?          // grams (total carbohydrates)
  sugars          Float?          // grams
  fat             Float?          // grams (total fat)
  saturatedFat    Float?          // grams
  fiber           Float?          // grams (fibre)
  salt            Float?          // grams
  
  preparationTime Int?            // minutes
  servingSize     Int?            // number of servings
  servingWeight   Int?            // weight in grams per serving
  
  ingredients     String?
  cookingInstructions String?      @db.Text
  storageInstructions String?      @db.Text
  recyclingInfo   String?         @db.Text
  safetyInfo      String?         @db.Text
  
  tags            String[]        @default([])  // halal, pasta, kids, student, etc.
  isFeatured      Boolean         @default(false)
  isBestOffer     Boolean         @default(false)
  isTopSaver      Boolean         @default(false)
  discount        Int?            // percentage discount
  stockAlert      Int?            // show "only X left" when stock below this
  limitedTimeOffer DateTime?      // show countdown timer
  
  // Product Variations Support
  hasVariations   Boolean         @default(false)
  parentProductId String?
  variationType   String?         // e.g., "size", "flavor", "bundle"
  variationValue  String?         // e.g., "Small", "Medium", "Large"
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  orderItems      OrderItem[]
  subscriptionItems SubscriptionItem[]
  sectionProducts SectionProduct[]
  variations      Product[]       @relation("ProductVariations")
  parentProduct   Product?        @relation("ProductVariations", fields: [parentProductId], references: [id])
  meals           Meal[]
  
  @@map("products")
}

model DeliveryZone {
  id          String  @id @default(cuid())
  name        String
  areas       String[] @default([])
  deliveryFee Float
  isActive    Boolean @default(true)
  
  orders      Order[]
  
  @@map("delivery_zones")
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  subtotal       Float
  deliveryFee    Float
  total          Float
  paymentIntentId String?
  deliveryAddress String
  deliveryZoneId String
  scheduledFor   DateTime?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  user           User         @relation(fields: [userId], references: [id])
  deliveryZone   DeliveryZone @relation(fields: [deliveryZoneId], references: [id])
  orderItems     OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Subscription {
  id                String               @id @default(cuid())
  userId            String
  frequency         SubscriptionFrequency
  status            SubscriptionStatus   @default(ACTIVE)
  nextDeliveryDate  DateTime
  deliveryAddress   String
  deliveryZoneId    String?
  stripeSubscriptionId String?
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  user              User                 @relation(fields: [userId], references: [id])
  subscriptionItems SubscriptionItem[]
  
  @@map("subscriptions")
}

model SubscriptionItem {
  id             String @id @default(cuid())
  subscriptionId String
  productId      String
  quantity       Int
  
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id])
  
  @@map("subscription_items")
}

model Contact {
  id          String      @id @default(cuid())
  userId      String?
  name        String
  email       String
  subject     String
  message     String
  status      ContactStatus @default(OPEN)
  createdAt   DateTime    @default(now())
  
  user        User?       @relation(fields: [userId], references: [id])
  
  @@map("contacts")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProductCategory {
  TRADITIONAL_IRISH
  INTERNATIONAL
  HEALTHY
  VEGETARIAN
  SEAFOOD
  COMFORT_FOOD
}

enum StorageType {
  FRESH_CHILLED
  FROZEN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum SubscriptionFrequency {
  WEEKLY
  FORTNIGHTLY
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum ContactStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

model PageContent {
  id          String   @id @default(cuid())
  page        String   @unique // e.g., "homepage", "combos-meals", "kids-meals"
  content     Json     // Stores editable content as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("page_contents")
}

model ProductSection {
  id          String   @id @default(cuid())
  name        String   // "Easy Meals Anytime", "Halal Meals", "PASTA Meals", etc.
  slug        String   @unique
  title       String
  description String?
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0)
  maxProducts Int      @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  sectionProducts SectionProduct[]
  
  @@map("product_sections")
}

model SectionProduct {
  id         String   @id @default(cuid())
  sectionId  String
  productId  String
  displayOrder Int    @default(0)
  createdAt  DateTime @default(now())
  
  section    ProductSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([sectionId, productId])
  @@map("section_products")
}

model Affiliate {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  phone           String?
  company         String?
  referralCode    String   @unique
  commissionRate  Float    @default(20.0)  // percentage
  status          AffiliateStatus @default(PENDING)
  totalEarnings   Float    @default(0)
  pendingEarnings Float    @default(0)
  paidEarnings    Float    @default(0)
  paypalEmail     String?
  bankDetails     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  referrals       AffiliateReferral[]
  payouts         AffiliatePayout[]
  
  @@map("affiliates")
}

model AffiliateReferral {
  id          String   @id @default(cuid())
  affiliateId String
  orderId     String
  orderAmount Float
  commission  Float
  status      ReferralStatus @default(PENDING)
  createdAt   DateTime @default(now())
  
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  
  @@map("affiliate_referrals")
}

model AffiliatePayout {
  id          String   @id @default(cuid())
  affiliateId String
  amount      Float
  method      String   // PayPal, Bank Transfer, etc.
  status      PayoutStatus @default(PENDING)
  reference   String?
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  
  @@map("affiliate_payouts")
}

enum AffiliateStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Nutrition & Meal Planning Models
model NutritionProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  
  // Goals
  dailyCalories   Int      @default(2000)
  dailyProtein    Float    @default(60)
  dailyCarbs      Float    @default(225)
  dailyFat        Float    @default(77)
  
  // Preferences
  dietaryPreferences String[] @default([])  // vegetarian, halal, low-carb, etc.
  allergies       String[] @default([])
  activityLevel   ActivityLevel @default(MODERATE)
  goal            NutritionGoal @default(MAINTAIN)
  
  // User info
  age             Int?
  weight          Float?   // in kg
  height          Float?   // in cm
  gender          Gender?
  
  // AI Preferences
  useAiSuggestions Boolean @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("nutrition_profiles")
}

model MealPlan {
  id              String   @id @default(cuid())
  userId          String
  name            String   @default("My Meal Plan")
  date            DateTime
  isActive        Boolean  @default(true)
  isAiGenerated   Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals           Meal[]
  
  @@map("meal_plans")
}

model Meal {
  id              String   @id @default(cuid())
  mealPlanId      String
  productId       String
  mealType        MealType
  servings        Float    @default(1)
  scheduledTime   String?  // e.g., "08:00", "13:00", "18:00"
  
  // Cached nutrition data for the meal
  calories        Int?
  protein         Float?
  carbs           Float?
  fat             Float?
  
  notes           String?
  completed       Boolean  @default(false)
  completedAt     DateTime?
  
  createdAt       DateTime @default(now())
  
  mealPlan        MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])
  
  @@map("meals")
}

model DailyIntake {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime
  
  // Total intake for the day
  totalCalories   Int      @default(0)
  totalProtein    Float    @default(0)
  totalCarbs      Float    @default(0)
  totalFat        Float    @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("daily_intakes")
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum NutritionGoal {
  LOSE_WEIGHT
  MAINTAIN
  GAIN_MUSCLE
  IMPROVE_HEALTH
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MealType {
  BREAKFAST
  MORNING_SNACK
  LUNCH
  AFTERNOON_SNACK
  DINNER
  EVENING_SNACK
}
